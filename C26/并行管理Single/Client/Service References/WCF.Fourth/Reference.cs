//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18047
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.WCF.Fourth {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCF.Fourth.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Operate", ReplyAction="http://tempuri.org/IService/OperateResponse")]
        void Operate();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/Operate", ReplyAction="http://tempuri.org/IService/OperateResponse")]
        System.IAsyncResult BeginOperate(System.AsyncCallback callback, object asyncState);
        
        void EndOperate(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Client.WCF.Fourth.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Client.WCF.Fourth.IService>, Client.WCF.Fourth.IService {
        
        private BeginOperationDelegate onBeginOperateDelegate;
        
        private EndOperationDelegate onEndOperateDelegate;
        
        private System.Threading.SendOrPostCallback onOperateCompletedDelegate;
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OperateCompleted;
        
        public void Operate() {
            base.Channel.Operate();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOperate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOperate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndOperate(System.IAsyncResult result) {
            base.Channel.EndOperate(result);
        }
        
        private System.IAsyncResult OnBeginOperate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginOperate(callback, asyncState);
        }
        
        private object[] OnEndOperate(System.IAsyncResult result) {
            this.EndOperate(result);
            return null;
        }
        
        private void OnOperateCompleted(object state) {
            if ((this.OperateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OperateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OperateAsync() {
            this.OperateAsync(null);
        }
        
        public void OperateAsync(object userState) {
            if ((this.onBeginOperateDelegate == null)) {
                this.onBeginOperateDelegate = new BeginOperationDelegate(this.OnBeginOperate);
            }
            if ((this.onEndOperateDelegate == null)) {
                this.onEndOperateDelegate = new EndOperationDelegate(this.OnEndOperate);
            }
            if ((this.onOperateCompletedDelegate == null)) {
                this.onOperateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOperateCompleted);
            }
            base.InvokeAsync(this.onBeginOperateDelegate, null, this.onEndOperateDelegate, this.onOperateCompletedDelegate, userState);
        }
    }
}
