第4章  WPF布局
在WPF应用程序开发中，开发人员需要改变传统的基于像素的用户界面布局方式，WPF使用了灵活的，分辩率和设备独立的布局方式，使应用程序的用户界面能适应多种显示器尺寸和不同的分辩率。WPF使用了多种容器控件来布局用户控件，每个容器都具有自己的布局逻辑，比如基于堆叠的StackPanel，基于网格的Grid以及类似于DIV流式布局的WarpPanel等等。
4.1   理解WPF布局
在Windows Forms提供的布局系统中，控件使用硬编码的坐标系统被固定到窗口的某个位置，为了让控件适应窗口的大小，唯一可做的就是设置Anchoring和Docking属性，使其固定到窗体的某个位置。这种方式对于一些简单的布局场合工作得似乎也不错，但是对于一些稍稍复杂的场合，比如，按比例分配控件的空间或者是动态用户界面创建的情形，将很难自适应用户界面。
微软为了解决这种较高要求的界面布局问题，在.NET 2.0中引入了FlowLayoutPanel和TableLayoutPanel，尽管也解决了不少问题，但是这两个面板基于固定尺寸的布局，同样也具有一些其他的布局问题。WPF则引入了更新的布局特性，使得用户界面布局更加灵活。
4.1.1  WPF的布局原理
WPF的窗口，也即Window类，是一个内容控件，该控件派生自ContentControl，内容控件有一个Content属性，该属性有一个限制，只能放置一个用户界面元素，或者是一串字符串。为了在窗口上放置多个界面控件，通常在窗口上放置一个容器控件。比如VS2008在自动生成Window1.xaml时，则自动创建了一个<Grid>元素来放置用户界面。
在WPF应用程序中，内容控件的布局逻辑基于使用的容器控件，一般WPF窗口遵循如下几个布局原则：
?	元素不应该被显示指定尺寸，通常应该使其自适应其内容。比如，按钮根据所添加的文本来扩展其大小。可以通过设置 maximun和minimun尺寸来限制控件可接受的尺寸大小。
?	元素不应该使用屏幕坐标来指定其位置，通常是基于其尺寸来进行自动排列其位置。
?	布局容器将在其子元素之间共享其可用空间。通常由容器尝试为其每个子元素分配合适的尺寸。
?	布局容器允许嵌套，比如由VS2008自动生成的window1.xaml中，包含一个Grid元素，可以在该容器中再放入StackPanel等容器控件形成一个嵌套的布局界面。
建议开发人员严格遵守这些规则，灵活的使用WPF的布局系统将能开发出更灵活、更强大的用户界面。

?	None：InkCanvas将忽略鼠标或者是手写设备的输入，使其表现为一个普通的Canvas一样。
?	Ink：当鼠标或者是手写设备在画布上绘制时，显示绘制的数字墨迹，这是默认设置。
?	GestureOnly：当鼠标或手写设备在画布上点击并移动时，将显示移动的笔势，但是并不进行实际的绘制，比如当鼠标松开时，笔迹将会消失。
?	InkAndGesture：InkCanvas将对笔势作出响应，并接收墨迹。
?	Select：可以选择己经绘制的墨迹，效果如图4.34所示。
             
图4.33  InkCanvas示例                       图4.34  InkCanvas的Select模式
?	EraseByPoint：指示当笔和笔画相交时将擦除部分笔画，这类似于绘图软件中的橡皮擦工具，如图4.35所示。
?	EraseByStroke：当笔和笔画相交时将擦除整个笔画，运行效果如图4.36所示。
           
图4.35  InkCanvas的EraseByPoint模式           图4.35  InkCanvas的EraseByStroke模式
4.6   小结
本章介绍了WPF中的布局特性，首先讨论了WPF中引入的布局系统的基本原理。简单的讨论了布局的过程。接下来对WPF中的几种布局容器进行了详细的介绍，包括StackPanel、DockPanel、WrapPanel，以及在WPF中功能最强大的Grid控件的使用，最后讨论了两种精确定位的容器Canvas和InkCanvas控件。
下一章将介绍WPF中新引入的内容系统。
